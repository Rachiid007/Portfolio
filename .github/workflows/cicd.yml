name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js 18.x
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x
  #         cache: 'npm'
  #         cache-dependency-path: 'package-lock.json'

  #     - name: Execute Unit tests
  #       run: |
  #         npm ci
  #         npm run test:unit
  #       working-directory: .

  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build-only
      - name: copy index.html to 404.html
        run: cp dist/index.html dist/404.html
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      # - name: Execute Cypress E2E tests
      #   uses: cypress-io/github-action@v5
      #   timeout-minutes: 5
      #   with:
      #     working-directory: .
      #     start: npm run dev
      #     wait-on: http://localhost:5173
      #     wait-on-timeout: 60
      #     browser: chrome
      #     spec: 'cypress/**/*.cy.js'

  # if all the previous step is ok, then build the docker image from each of the folders
  # build-docker-image:
  #   runs-on: ubuntu-latest
  #   needs: [frontend-test-build]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: rachiid007
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push frontend
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: ./frontend
  #         build-args: |
  #           "VITE_API_KEY=${{ secrets.VITE_API_KEY }}"
  #         file: ./frontend/Dockerfile
  #         push: true
  #         tags: rachiid007/frontend:latest
